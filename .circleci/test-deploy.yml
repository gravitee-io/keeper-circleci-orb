version: 2.1
orbs:
  keeper: gravitee-io/keeper@dev:<<pipeline.git.revision>>
  orb-tools: circleci/orb-tools@11.1
filters: &filters
  tags:
    only: /.*/

jobs:
  integration-test-install-latest:
    docker:
      - image: cimg/base:stable
    steps:
      - keeper/install
      - run:
          name: "Assert keeper installation"
          command: |
            if [[ -f keeper.ini ]]; then
              echo "❌ keeper.ini file created in the current directory."
              exit 1
            fi      
            if [[ ! -f /tmp/keeper.ini ]]; then
              echo "❌ no keeper.ini file created in the /tmp directory."
              exit 1
            fi

  integration-test-install-version:
    docker:
      - image: cimg/base:stable
    steps:
      - keeper/install:
          version: 1.0.7
      - run:
          name: "Assert keeper installation"
          command: |
            if [[ -f keeper.ini ]]; then
              echo "❌ keeper.ini file created in the current directory."
              exit 1
            fi      
            if [[ ! -f /tmp/keeper.ini ]]; then
              echo "❌ no keeper.ini file created in the /tmp directory."
              exit 1
            fi

  integration-test-install-on-alpine:
    docker:
      - image: alpine:3.15
    steps:
      - keeper/install
      - run:
          name: "Assert keeper installation"
          command: |
            if [[ -f keeper.ini ]]; then
              echo "❌ keeper.ini file created in the current directory."
              exit 1
            fi      
            if [[ ! -f /tmp/keeper.ini ]]; then
              echo "❌ no keeper.ini file created in the /tmp directory."
              exit 1
            fi

  integration-test-env-export:
    docker:
      - image: cimg/base:stable
    steps:
      - keeper/env-export:
          secret-url: keeper://zB_JnULMlYaeCEQPE8p3HA/field/login
          var-name: MY_USER
      - keeper/env-export:
          secret-url: keeper://zB_JnULMlYaeCEQPE8p3HA/field/password
          var-name: MY_PASSWORD
      - run:
          name: "Assert environment variables set"
          command: |
            if [[ "$MY_USER" != "test" ]]; then
              echo "❌ MY_USER env invalid"
              echo "Expected MY_USER=test, but was MY_USER=${MY_USER}"
              echo "Content of export command: $(cat $BASH_ENV)"
              exit 1;
            fi              
            if [[ "$MY_PASSWORD" != "keeper2022" ]]; then
              echo "❌ MY_PASSWORD env invalid"
              echo "Expected MY_PASSWORD=keeper2022, but was MY_PASSWORD=${MY_USER}"
              echo "Content of export command: $(cat $BASH_ENV)"
              exit 1;
            fi

  integration-test-env-export-on-alpine:
    docker:
      - image: alpine:3.15
    steps:
      - keeper/env-export:
          secret-url: keeper://zB_JnULMlYaeCEQPE8p3HA/field/login
          var-name: MY_USER
      - keeper/env-export:
          secret-url: keeper://zB_JnULMlYaeCEQPE8p3HA/field/password
          var-name: MY_PASSWORD
      - run:
          name: "Assert environment variables set"
          command: |
            . $BASH_ENV
            
            if [[ "$MY_USER" != "test" ]]; then
              echo "❌ MY_USER env invalid"
              echo "Expected MY_USER=test, but was MY_USER=${MY_USER}"
              echo "Content of export command: $(cat $BASH_ENV)"
              exit 1;
            fi              
            if [[ "$MY_PASSWORD" != "keeper2022" ]]; then
              echo "❌ MY_PASSWORD env invalid"
              echo "Expected MY_PASSWORD=keeper2022, but was MY_PASSWORD=${MY_USER}"
              echo "Content of export command: $(cat $BASH_ENV)"
              exit 1;
            fi

workflows:
  test-deploy:
    jobs:
      # Make sure to include "filters: *filters" in every test job you want to run as part of your deployment.
      - integration-test-install-latest:
          filters: *filters
      - integration-test-install-version:
          filters: *filters
      - integration-test-install-on-alpine:
          filters: *filters
      - integration-test-env-export:
          filters: *filters
      - integration-test-env-export-on-alpine:
          filters: *filters
      - orb-tools/pack:
          filters: *filters
      - orb-tools/publish:
          orb-name: gravitee-io/keeper
          vcs-type: << pipeline.project.type >>
          pub-type: production
          requires:
            - orb-tools/pack
            - integration-test-install-latest
            - integration-test-install-version
            - integration-test-install-on-alpine
            - integration-test-env-export
            - integration-test-env-export-on-alpine
          context: keeper-orb-publishing
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+$/
